#########################################################################
#
# Athom Energy Monitor - 6 Channel
# See: https://www.athom.tech/blank-1/6-ch-energy-meter-made-for-esphome
#

substitutions:
  # Default name
  name: "energy-meter"
  # Default friendly name
  friendly_name: "Energy Meter"
  # Description as appears in ESPHome & top of webserver page  
  device_description: "Athom - Energy Meter (BL0906 6 channels)"
  # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc
  location: "Switchboards"
  # Project Name
  project_name: "Athom.Energy Monitor (6 Channels)"
  # Project version denotes the release version of the yaml file, allowing checking of deployed vs latest version
  project_version: "2.0.4"
  # The phase in the home power supply, upon which this plug is utilsed. 1p = A. 3p = A, B or C.  (myHome GPO 1 = Phase C, GPO 2 = Phase A, GPO 3 = Phase B)
  power_circuit: "TBC"  
  # Sensor update interval
  update_interval: 5s
  # Hide, by making 'internal', the individual CT's energy sensors
  hide_non_grid_energy_sensors: "false"
  # Disable sensors recording Grid EXPORTS (i.e. house with no solar installed)
  disable_grid_export_sensors: "true"

  # Names to describe the usage of each CT sensor. i.e. Lights, GPO1, Grid etc. Used to then prefix all the associated sensors.
  ct_sensor_1_name: "CT 1"      # CT 1
  ct_sensor_2_name: "CT 2"      # CT 2
  ct_sensor_3_name: "CT 3"      # CT 3
  ct_sensor_4_name: "CT 4"      # CT 4
  ct_sensor_5_name: "CT 5"      # CT 5
  ct_sensor_6_name: "CT 6"      # CT 6

  # Define the ID of the CT's that are connected to the Grid/Mains Phase A, B and C. Utilise the already defined id's of power1 ---> power6.
  grid_phase_a_ct: "power1"  
  grid_phase_b_ct: "power2"
  grid_phase_c_ct: "power3"
   
#############################ESP32C3###########################

  bl0906_tx_pin: GPIO7
  bl0906_rx_pin: GPIO8
  button_pin:    GPIO9
  led_pin:       GPIO10
  clk_pin:       GPIO2
  mosi_pin:      GPIO3
  backlight_pin: GPIO18
  reset_pin:     GPIO4
  dc_pin:        GPIO5
  cs_pin:        GPIO6
  
########################## End of Substitutions #########################

esp32:
  board: esp32-c3-devkitm-1
  flash_size: 4MB
  variant: ESP32C3
  framework:
    type: arduino
    version: recommended

preferences:
  flash_write_interval: 5min

logger:
  baud_rate: 115200
  level:  ${log_level}
  hardware_uart: UART0

#########################################################################
#
# Remote Packages to be utilised
#

dashboard_import:
  package_import_url: github://jacomms/myhomeassistant/athom-energy-monitor-x6.yaml@main

packages:
  base-config:         !include common/base-configuration.yaml
  wifi-config:         !include common/network-wifi.yaml

#####################################################################
#
# External Components
#

external_components:

# Dentra Components - Adds 'Platform - Energy Statistics'
# https://github.com/dentra/esphome-components/tree/master/components/energy_statistics
  - source: github://roving-ronin/myhomeassistant/components@main
    refresh: 0s


#####################################################################
#
# Combined with web_server settings in /common/base-configuration to
# define a network information group
#

web_server:
  sorting_groups:
    - id: group_environmental_sensors
      name: "Environmental Sensors"
      sorting_weight: -48
      
    - id: group_electricity_sensors
      name: "Electricity Sensors"
      sorting_weight: -47

    - id: group_electricity_sensors_phase
      name: "Electricity Sensors by Phase"
      sorting_weight: -46

    - id: group_consumption_ct_sensor_4
      name: "Consumption - ${ct_sensor_4_name}"
      sorting_weight: -45

    - id: group_consumption_ct_sensor_5
      name: "Consumption - ${ct_sensor_5_name}"
      sorting_weight: -44

    - id: group_consumption_ct_sensor_6
      name: "Consumption - ${ct_sensor_6_name}"
      sorting_weight: -43
    
    - id: group_energy_import_sensors
      name: "Energy Sensors - Grid Import"
      sorting_weight: -42

    - id: group_energy_export_sensors
      name: "Energy Sensors - Grid Export"
      sorting_weight: -41

    - id: group_light_controls
      name: "Light Controls"
      sorting_weight: -20


#####################################################################
#
# Globals - Store values between reboots
#

globals:

#######################

  - id: total_export_energy_persist
    type: float
    restore_value: no
    initial_value: '0.0'

  - id: total_import_energy_persist
    type: float
    restore_value: no
    initial_value: '0.0'

#######################

  - id: id_energy_1_import_persist
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: id_energy_1_import_lastvalue
    type: float
    restore_value: no
    initial_value: '0.0'

#######################

  - id: id_energy_2_import_persist
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: id_energy_2_import_lastvalue
    type: float
    restore_value: no
    initial_value: '0.0'

#######################

  - id: id_energy_3_import_persist
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: id_energy_3_import_lastvalue
    type: float
    restore_value: no
    initial_value: '0.0'

#######################

  - id: id_energy_4_import_persist
    type: float
    restore_value: yes
    initial_value: '0.0'
  
  - id: id_energy_4_import_lastvalue
    type: float
    restore_value: no
    initial_value: '0.0'

#######################

  - id: id_energy_5_import_persist
    type: float
    restore_value: yes
    initial_value: '0.0'
  
  - id: id_energy_5_import_lastvalue
    type: float
    restore_value: no
    initial_value: '0.0'

#######################

  - id: id_energy_6_import_persist
    type: float
    restore_value: yes
    initial_value: '0.0'
  
  - id: id_energy_6_import_lastvalue
    type: float
    restore_value: no
    initial_value: '0.0'

#####################################################################
#
# Define the COMs Port
#

uart:
  tx_pin: "$bl0906_tx_pin"
  rx_pin: "$bl0906_rx_pin"
  baud_rate: 19200
  id: uart_bl0906


#####################################################################
#
# Button - Reset Energy Sensors
#

button:

  - platform: template
    name: Reset - Total Energy
    entity_category: config
    icon: mdi:restart-alert
    on_press:
      then:
        - globals.set:
            id: id_energy_1_import_persist
            value: '0.0'
        - globals.set:
            id: id_energy_2_import_persist
            value: '0.0'
        - globals.set:
            id: id_energy_3_import_persist
            value: '0.0'
        - globals.set:
            id: id_energy_4_import_persist
            value: '0.0'
        - globals.set:
            id: id_energy_5_import_persist
            value: '0.0'
        - globals.set:
            id: id_energy_6_import_persist
            value: '0.0'
        - globals.set:
            id: total_import_energy_persist
            value: '0.0'
        - globals.set:
            id: total_export_energy_persist
            value: '0.0'
        - bl0906.reset_energy: id_bl0906
    web_server:
      sorting_weight: 28

# COMMENT: Not sure if total_import_energy_persist and total_export_energy_persist are resetting when button pushed. Last time had to hit 'Factory Reset to Default' to wipe them.

#####################################################################
#
# Lights
#

light:
  - platform: status_led
    name: "Status LED"
    id: blue_led
    icon: 'mdi:led-on'
    disabled_by_default: true
    pin: $led_pin
    web_server:
      sorting_group_id: group_light_controls
      sorting_weight: 1


#####################################################################
#
# Binary Sensors
#

binary_sensor:

  - platform: gpio
    pin:
      number: "$button_pin"
      mode: INPUT_PULLUP
      inverted: true
    name: "Power Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset
    entity_category: config
    internal: true


#####################################################################
#
# Sensors
#

sensor:

  - platform: bl0906
    id: id_bl0906
    update_interval: "${update_interval}"

    temperature:
      name: 'Temperature'
      id: 'Temperature'
      web_server:
        sorting_group_id: group_environmental_sensors

    frequency:
      name: 'Frequency'
      id: 'Frequency'
      web_server:
        sorting_group_id: group_electricity_sensors
        sorting_weight: 6

    voltage:
      name: 'Voltage'
      id: 'Voltage'
      web_server:
        sorting_group_id: group_electricity_sensors
        sorting_weight: 5

#######################
#
# CT Sensor - 1
#

    channel_1:
      power:
        name: "${ct_sensor_1_name} - Power"
        id: 'power_1'
        web_server:
          sorting_group_id: group_electricity_sensors_phase
          sorting_weight: 1
        
      current:
        name: "${ct_sensor_1_name} - Current"
        id: 'current_1'
        web_server:
          sorting_group_id: group_electricity_sensors_phase
          sorting_weight: 2

      energy:
        name: "${ct_sensor_1_name} - Energy Total"
        id: 'energy_1'
        internal: true

#######################
#
# CT Sensor - 2
#

    channel_2:
      power:
        name: "${ct_sensor_2_name} - Power"
        id: 'power_2'
        web_server:
          sorting_group_id: group_electricity_sensors_phase
          sorting_weight: 3

      current:
        name: "${ct_sensor_2_name} - Current"
        id: 'current_2'
        web_server:
          sorting_group_id: group_electricity_sensors_phase
          sorting_weight: 4

      energy:
        name: "${ct_sensor_2_name} - Energy Total"
        id: 'energy_2'
        web_server:
          sorting_weight: '6'
        internal: true

#######################
#
# CT Sensor - 3
#

    channel_3:
      power:
        name: "${ct_sensor_3_name} - Power"
        id: 'power_3'
        web_server:
          sorting_group_id: group_electricity_sensors_phase
          sorting_weight: 5

      current:
        name: "${ct_sensor_3_name} - Current"
        id: 'current_3'
        web_server:
          sorting_group_id: group_electricity_sensors_phase
          sorting_weight: 6

      energy:
        name: "${ct_sensor_3_name} - Energy Total"
        id: 'energy_3'
        web_server:
          sorting_weight: '9'
        internal: true

#######################
#
# CT Sensor - 4
#

    channel_4:
      power:
        name: "${ct_sensor_4_name} - Power"
        id: 'power_4'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_4
          sorting_weight: 1

      current:
        name: "${ct_sensor_4_name} - Current"
        id: 'current_4'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_4
          sorting_weight: 2

      energy:
        name: "${ct_sensor_4_name} - Energy Total"
        id: 'energy_4'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_4
          sorting_weight: 3
        internal: ${hide_non_grid_energy_sensors}
      
#######################
#
# CT Sensor - 5
#

    channel_5:
      power:
        name: "${ct_sensor_5_name} - Power"
        id: 'power_5'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_5
          sorting_weight: 1

      current:
        name: "${ct_sensor_5_name} - Current"
        id: 'current_5'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_5
          sorting_weight: 2

      energy:
        name: "${ct_sensor_5_name} - Energy Total"
        id: 'energy_5'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_5
          sorting_weight: 4
        internal: ${hide_non_grid_energy_sensors}
      
#######################
#
# CT Sensor - 6
#

    channel_6:
      power:
        name: "${ct_sensor_6_name} - Power"
        id: 'power_6'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_6
          sorting_weight: 1

      current:
        name: "${ct_sensor_6_name} - Current"
        id: 'current_6'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_6
          sorting_weight: 2

      energy:
        name: "${ct_sensor_6_name} - Energy Total"
        id: 'energy_6'
        web_server:
          sorting_group_id: group_consumption_ct_sensor_6
          sorting_weight: 4
        internal: ${hide_non_grid_energy_sensors}
    
  
#######################
#
# Sensors - Sum Totals
#
    total_energy:
      name: 'Total - Energy'
      id: 'total_energy'
      internal: true

#####################################################################
#
# Template Sensors
#

    # Show the NETT Power coming from or going to the Grid/Mains. Derived from CT1, CT2 and CT3 Power
  - platform: template
    name: "Grid Power - Total"
    id: grid_power_total
    device_class: power
    state_class: "measurement"
    unit_of_measurement: "W"
    icon: mdi:transmission-tower
    lambda: |-
      return id(power_1).state + id(power_2).state + id(power_3).state;
    update_interval: 5s
    web_server:
      sorting_group_id: group_electricity_sensors
      sorting_weight: 1

    # Show the Import Power coming from the Grid/Mains. Derived from CT1, CT2 and CT3 Power
  - platform: template
    name: "Grid Power - Import"
    id: grid_power_import
    device_class: power
    state_class: "measurement"
    unit_of_measurement: "W"
    icon: mdi:transmission-tower-import
#    lambda: |-
#      return max(0.0f, id(power_1).state + id(power_2).state + id(power_3).state);
    lambda: |-
      float sum = 0.0f;
      if (id(power_1).state > 0.0f) {
        sum += id(power_1).state;
      }
      if (id(power_2).state > 0.0f) {
        sum += id(power_2).state;
      }
      if (id(power_3).state > 0.0f) {
        sum += id(power_3).state;
      }
      return sum > 0.0f ? sum : 0.0f;
    update_interval: ${update_interval}
    internal: ${disable_grid_export_sensors}
    web_server:
      sorting_group_id: group_electricity_sensors
      sorting_weight: 2

    # Show the Export Power going to the Grid/Mains. Derived from CT1, CT2 and CT3 Power
  - platform: template
    name: "Grid Power - Export"
    id: grid_power_export
    device_class: power
    state_class: "measurement"
    unit_of_measurement: "W"
    icon: mdi:transmission-tower-export
#    lambda: |-
#      return max(0.0f, -id(power_1).state + -id(power_2).state + -id(power_3).state);
    lambda: |-
      float sum = 0.0f;
      if (id(power_1).state < 0.0f) {
        sum += id(power_1).state;
      }
      if (id(power_2).state < 0.0f) {
        sum += id(power_2).state;
      }
      if (id(power_3).state < 0.0f) {
        sum += id(power_3).state;
      }
      return sum < 0.0f ? sum : 0.0f;
    update_interval: ${update_interval}
    internal: ${disable_grid_export_sensors}
    web_server:
      sorting_group_id: group_electricity_sensors
      sorting_weight: 3

    # Show the Export Power going to the Grid/Mains. Derived from CT1, CT2 and CT3 Power
    # Same as above sensor, but converts from Watts to KiloWatts, to be used Integration sensor to provide 'Energy Total Export' sensor
  - platform: template
    name: "Grid Power - Export kW"
    id: grid_power_export_kw
    device_class: power
    state_class: "measurement"
    unit_of_measurement: "kW"
    icon: mdi:transmission-tower-export
#    lambda: |-
#      return max(0.0f, -id(power_1).state + -id(power_2).state + -id(power_3).state);
    lambda: |-
      float sum = 0.0f;
      if (id(power_1).state < 0.0f) {
        sum += id(power_1).state;
      }
      if (id(power_2).state < 0.0f) {
        sum += id(power_2).state;
      }
      if (id(power_3).state < 0.0f) {
        sum += id(power_3).state;
      }
      return sum < 0.0f ? sum : 0.0f;
    filters:
      - multiply: 0.001
    update_interval: ${update_interval}
    internal: ${disable_grid_export_sensors}
    web_server:
      sorting_group_id: group_electricity_sensors
      sorting_weight: 4

    # Conver the 'grid_power_export_kw' sensor into kWh, giving a sensor recoding the Lifetime Energy Export.
  - platform: integration
    name: "Grid Energy - Export Total"
    id: grid_energy_export_total
    sensor: grid_power_export_kw
    device_class: energy
    state_class: total_increasing
    time_unit: h
    unit_of_measurement: 'kWh'
    accuracy_decimals: 3
    icon: mdi:transmission-tower-export
    filters:
      # Add the accumulated value from the global variable
      - lambda: return x + id(total_export_energy_persist);
#    restore: true
    internal: ${disable_grid_export_sensors}
    web_server:
      sorting_group_id: group_energy_export_sensors
      sorting_weight: 6


    # Show the Total (Lifetime) Energy FROM the Mains/Grid. 
    # The component for the BL0906 sensor is configured as 'State_Class_Total' so only reports upon the IMPORTED energy, not exported.
  - platform: template
    name: "Grid Energy - Import Total"
    id: grid_energy_import_total
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    icon: mdi:transmission-tower-import
    lambda: |-
      return id(energy_1).state + id(energy_2).state + id(energy_3).state;
    update_interval: 5s
    web_server:
      sorting_group_id: group_energy_import_sensors
      sorting_weight: 6


#####################################################################
#
# Energy IMPORT - Today / Yesterday / Week / Month / Year sensors
#

     # Dentra Components - Define the id of the sensor tracking 'Total Energy' used
  - platform: "energy_statistics"
    total: grid_energy_import_total
    
     # Dentra Components - Adds Energy Today. Persistents if restarted, unlike 'total_daily_energy'
    energy_today:
      name: "Grid Energy - Import Today"
      id: grid_energy_import_today
      web_server:
        sorting_group_id: group_energy_import_sensors
        sorting_weight: 1

     # Dentra Components - Adds Energy Yesterday
    energy_yesterday:
      name: "Grid Energy - Import Yesterday"
      id: grid_energy_import_yesterday
      web_server:
        sorting_group_id: group_energy_import_sensors
        sorting_weight: 2

     # Dentra Components - Adds Energy Week
    energy_week:
      name: "Grid Energy - Import Week"
      id: grid_energy_import_week
      web_server:
        sorting_group_id: group_energy_import_sensors
        sorting_weight: 3

     # Dentra Components - Adds Energy Month
    energy_month:
      name: "Grid Energy - Import Month"
      id: grid_energy_import_month
      web_server:
        sorting_group_id: group_energy_import_sensors
        sorting_weight: 4

    energy_year:
      name: "Grid Energy - Import Year"
      id: grid_energy_import_year
      web_server:
        sorting_group_id: group_energy_import_sensors
        sorting_weight: 5


#####################################################################
#
# Energy EXPORT - Today / Yesterday / Week / Month / Year sensors
#

     # Dentra Components - Define the id of the sensor tracking 'Total Energy' used
  - platform: "energy_statistics"
    total: grid_energy_export_total
    
     # Dentra Components - Adds Energy Today. Persistents if restarted, unlike 'total_daily_energy'
    energy_today:
      name: "Grid Energy - Export Today"
      id: grid_energy_export_today
      internal: ${disable_grid_export_sensors}
      web_server:
        sorting_group_id: group_energy_export_sensors
        sorting_weight: 1

     # Dentra Components - Adds Energy Yesterday
    energy_yesterday:
      name: "Grid Energy - Export Yesterday"
      id: grid_energy_export_yesterday
      internal: ${disable_grid_export_sensors}
      web_server:
        sorting_group_id: group_energy_export_sensors
        sorting_weight: 2

     # Dentra Components - Adds Energy Week
    energy_week:
      name: "Grid Energy - Export Week"
      id: grid_energy_export_week
      internal: ${disable_grid_export_sensors}
      web_server:
        sorting_group_id: group_energy_export_sensors
        sorting_weight: 3

     # Dentra Components - Adds Energy Month
    energy_month:
      name: "Grid Energy - Export Month"
      id: grid_energy_export_month
      internal: ${disable_grid_export_sensors}
      web_server:
        sorting_group_id: group_energy_export_sensors
        sorting_weight: 4

    energy_year:
      name: "Grid Energy - Export Year"
      internal: ${disable_grid_export_sensors}
      id: grid_energy_export_year
      web_server:
        sorting_group_id: group_energy_export_sensors
        sorting_weight: 5


#####################################################################


  - platform: copy
    name: 'Energy_1'
    id: energy_1_import_persist
    source_id: energy_1
    filters:
      - lambda: |-
          if(id(id_energy_1_import_lastvalue) == 0.0  )
          {
            id(id_energy_1_import_lastvalue) = id(energy_1).state;
          }
          if(x < id(id_energy_1_import_persist))
          {
            float delta =  x - id(id_energy_1_import_lastvalue);
            id(id_energy_1_import_persist) += delta;
            id(id_energy_1_import_lastvalue) = x;
          }
          else
          {
            id(id_energy_1_import_persist) = x;
          }
          return id(id_energy_1_import_persist);
    internal: true
    
  - platform: copy
    name: 'Energy_2'
    id: energy_2_import_persist
    source_id: energy_2
    filters:
      - lambda: |-
          if(id(id_energy_2_import_lastvalue) == 0.0  )
          {
            id(id_energy_2_import_lastvalue) = id(energy_2).state;
          }
          if(x < id(id_energy_2_import_persist))
          {
            float delta =  x - id(id_energy_2_import_lastvalue);
            id(id_energy_2_import_persist) += delta;
            id(id_energy_2_import_lastvalue) = x;
          }
          else
          {
            id(id_energy_2_import_persist) = x;
          }
          return id(id_energy_2_import_persist);
    internal: true
    
  - platform: copy
    name: 'Energy_3'
    id: energy_3_import_persist
    source_id: energy_3
    filters:
      - lambda: |-
          if(id(id_energy_3_import_lastvalue) == 0.0  )
          {
            id(id_energy_3_import_lastvalue) = id(energy_3).state;
          }
          if(x < id(id_energy_3_import_persist))
          {
            float delta =  x - id(id_energy_3_import_lastvalue);
            id(id_energy_3_import_persist) += delta;
            id(id_energy_3_import_lastvalue) = x;
          }
          else
          {
            id(id_energy_3_import_persist) = x;
          }
          return id(id_energy_3_import_persist);                    
    internal: true
    
  - platform: copy
    name: 'Energy_4'
    id: energy_4_import_persist
    source_id: energy_4
    filters:
      - lambda: |-
          if(id(id_energy_4_import_lastvalue) == 0.0  )
          {
            id(id_energy_4_import_lastvalue) = id(energy_4).state;
          }
          if(x < id(id_energy_4_import_persist))
          {
            float delta =  x - id(id_energy_4_import_lastvalue);
            id(id_energy_4_import_persist) += delta;
            id(id_energy_4_import_lastvalue) = x;
          }
          else
          {
            id(id_energy_4_import_persist) = x;
          }
          return id(id_energy_4_import_persist);
    internal: true
    
  - platform: copy
    name: 'Energy_5'
    id: energy_5_import_persist
    source_id: energy_5
    filters:
      - lambda: |-
          if(id(id_energy_5_import_lastvalue) == 0.0  )
          {
            id(id_energy_5_import_lastvalue) = id(energy_5).state;
          }
          if(x < id(id_energy_5_import_persist))
          {
            float delta =  x - id(id_energy_5_import_lastvalue);
            id(id_energy_5_import_persist) += delta;
            id(id_energy_5_import_lastvalue) = x;
          }
          else
          {
            id(id_energy_5_import_persist) = x;
          }
          return id(id_energy_5_import_persist);
    internal: true
    
  - platform: copy
    name: 'Energy_6'
    id: energy_6_import_persist
    source_id: energy_6
    filters:
      - lambda: |-
          if(id(id_energy_6_import_lastvalue) == 0.0  )
          {
            id(id_energy_6_import_lastvalue) = id(energy_6).state;
          }
          if(x < id(id_energy_6_import_persist))
          {
            float delta =  x - id(id_energy_6_import_lastvalue);
            id(id_energy_6_import_persist) += delta;
            id(id_energy_6_import_lastvalue) = x;
          }
          else
          {
            id(id_energy_6_import_persist) = x;
          }
          return id(id_energy_6_import_persist);
    internal: true

#####################################################################
