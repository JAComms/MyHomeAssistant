#########################################################################
#
# Water Meter with Reed Switch - Based on ESP82660
#
#

   # Provides substitutions or variables that are then called elsewhere multiple times in the config
substitutions:
   # Default name
  name: "water-meter"
   # Default friendly name  
  friendly_name: "Water Meter"
   # Description as appears in ESPHome & top of webserver page
  device_description: "Water Meter - Tracking household water consumption"
   # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc  
  location: "Utility Meters"
   # Project Name
  project_name: "JAComms.Water Meter"
   # Project version denotes the release version of the yaml file, allowing checking of deployed vs latest version
  project_version: "1.0.4"
   # Restore the relay (GPO switch) upon reboot to state:
  relay_restore_mode: RESTORE_DEFAULT_OFF
   # Disable sensors
  disable_entities: "false"
  
   # GPIO PIN that the Reed Switch sensor is connected to
  water_meter_pin: ""  # GPIO5

   # Type of ESP board being used. Used to populate the variable in /board/esp8266.yaml
  esp_board_type: "esp01_1m"   # This value is an ESP8266
   # For ESP8266 type boards, restore the saved values written to flash memory (i.e. Globals) after a reboot
  restore_from_flash: "true"

# GPIO5 - Input from Water Meter
# GPIO4 - Relay control (Unused)


########################## End of Substitutions #########################
#
# Remote Packages to be utilised
#

dashboard_import:
  package_import_url: github://jacomm/myhomeassistant/esphome/water-meter.yaml@main
  import_full_config: false

packages:
  base-config:     !include common/base-configuration.yaml
  wifi-config:     !include common/network-wifi.yaml
#  water-sensor:    !include sensors/reed-switch-water.yaml
  esp-board:       !include boards/esp8266.yaml


#########################################################################
#
# Enable Home Assistant API
#

api:
  services:
  # Define service that calls the 'button:' defined below to reset the Water - Current Reading'
    - service: reset_total_energy
      then:
        - button.press:
            id: button_reset_water_reading

#########################################################################
#
# Button - Call services / actions
#

button:
  #  Reset the total energy entity (Water - Current Reading)
  - platform: template
    name: 'Reset Reading'
    entity_category: config
    id: button_reset_water_reading
    on_press:
      - pulse_meter.set_total_pulses:
          id: flow_rate
          value: 0

##########################################################################
#
# Globals - Store Data between reboots
#

globals:
  - id: water_total_litres
    type: float
    restore_value: yes
   # Change initial value to 0 to reset, or enter your actual meter reading to start counting lifetime total from that number 
#    initial_value: "0"

#########################################################################
#
#  Sensors
#

sensor:

#########################################################################
#
# Utility - Water Meter
#

  - platform: pulse_counter
    name: "Pulse Count"
    id: pulse_count
    pin:
      number: ${water_meter_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT   
    filters:
      - lambda: return (x / 2.0);       # 1 pulse = 0.5L
    update_interval : 5s
    total:
      unit_of_measurement: 'pulses'
      name: "Pulse Count Total"
      id: pulse_count_total

  - platform: pulse_meter
    name: "Flow Rate"
    id: "flow_rate"
    unit_of_measurement: "L/min"
    state_class: measurement
    device_class: water
    icon: "mdi:pump"
    accuracy_decimals: 2
    pin:
      number: ${water_meter_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    internal_filter_mode: PULSE
    internal_filter: 100ms
    timeout: 1min
    filters:
      - lambda: return (x / 2.0);       # 1 pulse = 0.5L

    #  Uses the above pulse_meter and adds sensor and calculations for tracking current litres
    total:
      name: 'Water Consumed'
      id: water_consumed_litres
      unit_of_measurement: "L"
      icon: "mdi:water"
      state_class: "total_increasing"
      device_class: water
      accuracy_decimals: 2
      filters:
#        - lambda: return (x / 2000.0);   # 1 pulse = 0.5L.  This gives Kilo Litres
        - lambda: return (x / 2.0);   # 1 pulse = 0.5L.   This gives Litres
        - delta : 0.001
#        - multiply: 0.5
    #  Adds the calculation for 'Reading Total' 
      on_value: 
        then:
          - lambda: |-
              static float previous_water_litres_value = 0.0;
              float current_water_litres_value = id(water_consumed_litres).state;
              id(water_total_litres) += current_water_litres_value - previous_water_litres_value;
              previous_water_litres_value = current_water_litres_value;


  #  Adds the 'Reading Since Reset' that tracks the LIFETIME total of m3
  - platform: template
    name: "Reading (Since Last Reset)"
    id: reading_since_last_reset
    unit_of_measurement: "L"
    device_class: water
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 2
    # The number 5251.07 should be replaced with your own water meters physical reading
    lambda: |-
          return (id(water_total_litres) + 0);
    # Set interval that updates are sent to HA instance
    update_interval: 15s
    filters:
      - delta : 0.001

#########################################################################
