#########################################################################
#
# ESP32 Based monitoring for the Victron SmartSolar Charge Controller MPPT
# Based upon https://github.com/KinDR007/VictronMPPT-ESPHOME
#

   # Provides substitutions or variables that are then called elsewhere multiple times in the config
substitutions:
   # Default name 
  name: "victron-solar"
   # Default friendly name 
  friendly_name: "Victron Solar"
   # Description as appears in ESPHome & top of webserver page
  device_description: "Victron - SmartSolar Charge Controller MPPT 250 | 70-Tr"
   # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc  
  room: "Energy Management"
   # Project Name
  project_name: "Victron Energy.SmartSolar Charge Controller MPPT"
   # Project version denotes the release version of the yaml file, allowing checking of deployed vs latest version
  project_version: "0.1.1"
   # Restore the relay (Light switch) upon reboot to state:
  relay_restore_mode: RESTORE_DEFAULT_OFF
   # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as athom-smart-plug-v2.iot.home.lan in DNS/DHCP logs)
  dns_domain: ""
   # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: "Australia/Sydney"
   # Set the duration between the sntp service polling ntp.org servers for an update
  sntp_update_interval: 6h
   # Network time servers for your region, enter from lowest to highest priority
  sntp_server_1: "2.au.pool.ntp.org"
  sntp_server_2: "1.au.pool.ntp.org"
  sntp_server_3: "0.au.pool.ntp.org"
   # Enables faster network connections, with last connected SSID being connected to and no full scan for SSID being undertaken   
  wifi_fast_connect: "true"
   # m5 Stack Lite PINS
   # UART_0 / COM0
  scl_pin: "GPIO21"
  sca_pin: "GPIO25"
   # UART_1 / COM1
  scl2_pin: "GPIO19"
  sca2_pin: "GPIO22"  
   # Accuracy of sensors / decimals places
  accuracy: "3"
   #
  sensor_update_interval: 10s


esphome:
  #  Configures these settings to use the substituions defined below
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: '${device_description}'
  area: "${room}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"  
  

# Enable logging
logger:
  level: INFO    # WARN
  baud_rate: 0
  logs:
    component: ERROR # Fix for issue #4717 "Component xxxxxx took a long time for an operation"

# Enable Home Assistant API
api:

ota:

mdns:
  disabled: false

web_server:
  port: 80  

external_components:
  - source: github://KinDR007/VictronMPPT-ESPHOME@main
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # This spawns an AP with the device name and mac address with no password.
  ap: {}
  # Allow rapid re-connection to previously connect WiFi SSID, skipping scan of all SSID
  fast_connect: "${wifi_fast_connect}"
  # Define dns domain / suffix to add to hostname
  domain: "${dns_domain}"

captive_portal:  

#########################################################################
#
#
#
uart:
   # Connection to Victron Inverter
  - id: com0
    tx_pin: "${scl_pin}"  # GPIO26 Not used! The communication is read-only
    rx_pin: "${sca_pin}"  # GPIO32 Connect this this GPIO and GND to the first MPPT charger
    baud_rate: 19200
    rx_buffer_size: 256

 # - id: com1
 #   tx_pin: "${scl2_pin}"  # Not connected! The communication is read-only
 #   rx_pin: "${sca2_pin}"  # Connect this this GPIO and GND to the second MPPT charger
 #   baud_rate: 19200
 #   rx_buffer_size: 256
    
victron:
  - id: victron0
    throttle: "${sensor_update_interval}"
    uart_id: com0
#  - id: victron1
#    throttle: 10s  
#    uart_id: com1    

  # Create variable to track Total_Energy, across reboots
globals:
  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0'  

#########################################################################
#
# Sensors - Victron Specific
#

sensor:

  # Victron Inverter sensors
  - platform: victron
    victron_id: victron0

    max_power_yesterday:
      name: "Max Power Yesterday"
      id: max_power_yesterday
      accuracy_decimals: 1

    max_power_today:
      name: "Max Power Today"
      id: max_power_today
      accuracy_decimals: 1
    
    yield_total:
      name: "Yield Total"
      id: yield_total
      filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      unit_of_measurement: kWh
      accuracy_decimals: ${accuracy}
    
    yield_yesterday:
      name: "Yield Yesterday"
      id: yield_yesterday
      filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      unit_of_measurement: kWh
      accuracy_decimals: ${accuracy}

    yield_today:
      name: "Yield Today"
      id: yield_today
      filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      unit_of_measurement: kWh
      accuracy_decimals: ${accuracy}
    
    panel_voltage:
      name: "Panel Voltage"
      id: panel_voltage
      accuracy_decimals: 2
    
    panel_power:
      name: "Panel Power"
      id: panel_power
      accuracy_decimals: 1

    battery_voltage:
      name: "Battery Voltage"
      id: battery_voltage
      accuracy_decimals: 2

    battery_voltage_2:
      name: "Battery Voltage 2"
      id: battery_voltage_2
      accuracy_decimals: 2      

    battery_voltage_3:
      name: "Battery Voltage 3"
      id: battery_voltage_3
      accuracy_decimals: 2 
        
# This many not work for MPPT
    battery_current:
      name: "Battery Current"
      id: battery_current
      accuracy_decimals: 1

# This many not work for MPPT
    battery_current_2:
      name: "Battery Current 2"
      id: battery_current_2
      accuracy_decimals: 1    

# This many not work for MPPT
    battery_current_3:
      name: "Battery Current 3"
      id: battery_current_3
      accuracy_decimals: 1    

    day_number:
      name: "Day Number"
      id: day_number
      icon: "mdi:calendar-today"
      entity_category: diagnostic
      internal: True      

    charging_mode_id:
      name: "Charging Mode ID"
      id: charging_mode_id
      internal: True
    
    error_code:
      name: "Error Code"
      id: error_code
      internal: True
    
    tracking_mode_id:
      name: "Tracking Mode ID"
      id: tracking_mode_id
      internal: True

    load_current:
      name: "Load Current"
      id: load_current
      icon: "mdi:current-ac"    # Change this to current-dc, if it is a  DC Load

    ac_out_voltage:
      name: "AC Out Voltage"
      id: ac_out_voltage
      icon: "mdi:current-ac"    # Change this to current-dc, if it is a  DC Load      

    ac_out_current:
      name: "AC Out Current"
      id: ac_out_current
      icon: "mdi:current-ac"

    ac_out_apparent_power:
      name: "AC Out Apparent Power"
      id: ac_out_apparent_power
      icon: "mdi:lightning-bolt-outline"

    device_mode_id:
      name: ""
      id: 
      icon: "mdi:
      
    warning_code:
      name: ""
      id: 
      icon: "mdi:

# No Battery Management System installed
#    battery_temperature:
#      name: "Battery Temperature"

    instantaneous_power:
      name: "Instantaneous Power"
      id: instantaneous_power
      icon: "mdi:
      
    consumed_amp_hours:
      name: "Consumed Amp Hours"
      id: consumed_amp_hours
      icon: "mdi:

# No Battery Management System installed    
#    state_of_charge:
#      name: "Battery SoC"
#      id: battery_soc

    time_to_go:
      name: "Time to Go"
      id: time_to_go
      icon: "mdi:
      
    depth_of_the_deepest_discharge:
      name: "Depth of Deepest Discharge"
      id: depth_of_deepest_discharge
      icon: "mdi:
      
    depth_of_the_last_discharge:
      name: "Depth of Last Discharge"
      id: depth_of_last_discharge
      icon: "mdi:
    
    depth_of_the_average_discharge:
      name: "Depth of Average Discharge"
      id: depth_of_the_average_discharge
      icon: "mdi:
      
    number_of_charge_cycles:
      name: "Number of Charge Cycles"
      id: number_of_charge_cycles
      icon: "mdi:
      
    number_of_full_discharges:
      name: "Number of Full Discharges"
      id: number_of_full_discharges
      icon: "mdi:
      
    cumulative_amp_hours_drawn:
      name: "Cumulative Amp Hours Drawn"
      id: cumulative_amp_hours_drawn
      icon: "mdi:
    
    min_battery_voltage:
      name: "Battery Voltage - Minimum"
      id: battery_voltage_minium
      icon: "mdi:
    
    max_battery_voltage:
      name: "Battery Voltage - Maximum"
      id: battery_voltage_maximum
      icon: "mdi:
      
    last_full_charge:
      name: "Last Full Charge"
      id: last_full_charge
      icon: "mdi:
      
    number_of_automatic_synchronizations:
      name: "Number of Automatic Synchronizations"
      id: number_of_automatic_synchronizations
      icon: "mdi:
      
    number_of_low_main_voltage_alarms:
      name: "Number of Low Main Voltage Alarms"
      id: number_of_low_main_voltage_alarms
      icon: "mdi:
      
    number_of_high_main_voltage_alarms:
      name: "Number of High Main Voltage Alarms"
      id: number_of_high_main_voltage_alarms
      icon: "mdi:
      
    number_of_low_auxiliary_voltage_alarms:
      name: "Number of Low Auxiliary Voltage Alarms"
      id: number_of_low_auxiliary_voltage_alarms
      icon: "mdi:
      
    number_of_high_auxiliary_voltage_alarms:
      name: "Number of High Auxiliary Voltage Alarms"
      id: number_of_high_auxiliary_voltage_alarms
      icon: "mdi:
      
    min_auxiliary_battery_voltage:
      name: "Auxiliary Battery Voltage - Minimum"
      id: min_auxiliary_battery_voltage
      icon: "mdi:
      
    max_auxiliary_battery_voltage:
      name: "Auxiliary Battery Voltage - Maximum"
      id: max_auxiliary_battery_voltage
      icon: "mdi:
      
    amount_of_discharged_energy:
      name: "Amount of Discharged Energy"
      id: amount_of_discharged_energy
      icon: "mdi:
      
    amount_of_charged_energy:
      name: "Amount of Charged Energy"
      id: amount_of_charged_energy
      icon: "mdi:
    
#########################################################################
#
# Sensors - ESPHome generic / device sensors
#

  #  Sensor uptime in seconds
  - platform: uptime
    name: "Uptime Seconds"
    id: uptime_seconds
    update_interval: 120s
    entity_category: diagnostic
    internal: True

    # Calculates the Total Energy that has been generated / passed through the device
    # in its lifetime or since last reflashed
  - platform: template
    name: "Energy Total"
    id: energy_total_sensor
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    icon: "mdi:lightning-bolt"
    accuracy_decimals: 3
    lambda: |-
      return id(total_energy);

    # Calculates the Energy that has been generated / passed through the device for the
    # day or since rebooted (during the day)
  - platform: total_daily_energy
    name: "Energy Daily"
    id: energy_total_daily
    restore: true
    power_id: panel_power
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    icon: mdi:hours-24    

#########################################################################
#
# Button - Linked to services to manage ESP Device
#
button:
    # Reboot ESP (Normally)
  - platform: restart
    name: 'Restart Device'
    entity_category: config

    # Reboot ESP back to Factory Default Settings
  - platform: factory_reset
    name: Reset with Default Settings
    id: Reset
    entity_category: config

    # Reboot ESP in Safe Mode
  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    entity_category: config

#########################################################################
#
# Text Sensors - Device Information
#

text_sensor:

  #  Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Device Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic

  #  Creates sensor for tracking the WiFi IP address
  - platform: wifi_info
    ip_address:
      name: 'WiFi IP Address'
      icon: mdi:wifi
      entity_category: diagnostic

  #  Defines the WiFi SSID network to connect to
    ssid:
      name: 'WiFi SSID'
      icon: mdi:wifi-strength-2
      entity_category: diagnostic

  #  Creates sensor for tracking the WiFi IP MAC address
    mac_address:
      name: 'WiFi MAC Address'
      entity_category: diagnostic

  #  Creates a sensor of the name of installed project
  - platform: template
    name: 'Project Name'
    id: project_name
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_name}"};
    update_interval: 6h

  #  Creates a sensor of the version of installed project
  - platform: template
    name: 'Project Version'
    id: project_version
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_version}"};
    update_interval: 6h

  #  Creates a sensor of the version of installed ESPHome version
  - platform: version
    name: "Project ESPHome Version"
    hide_timestamp: true

#########################################################################
#
# Text Sensors - Victron
#    

  - platform: victron
    victron_id: victron0

    device_type:
      name: "Device Type"
      entity_category: diagnostic

    device_mode:
      name: "Device Mode"
      icon: "mdi:auto-mode"
      entity_category: diagnostic      

    firmware_version:
      name: "Firmware Version"
      icon: "mdi:numeric"
      entity_category: diagnostic

    serial_number:
      name: "Serial Number"
      icon: "mdi:numeric"
      entity_category: diagnostic

#    hardware_number:
#      name: "Hardware Revision"
#      entity_category: diagnostic

    error:
      name: "Error"
      entity_category: diagnostic
      
    warning:
      name: "Warning"
      entity_category: diagnostic
      
    alarm_condition_active:
      name: "Alarm Condition Active"
      icon: "mdi:alarm-light-outline"
      entity_category: diagnostic
      
    alarm_reason:
      name: "Alarm Reason"
      icon: "mdi:alert-circle-outline"
      entity_category: diagnostic
      
    model_description:
      name: "Model Description"
      entity_category: diagnostic
      
    charging_mode:
      name: "Charging Mode"
      icon: "mdi:battery-charging-outline"
      entity_category: diagnostic
      
    tracking_mode:
      name: "Tracking Mode"
      icon: "mdi:radar"
      entity_category: diagnostic    
    
#########################################################################
#
# Binary Sensors - Victron
#

binary_sensor:
  - platform: victron
    victron_id: victron0
    
    load_state:
      name: "Load State"
      icon: "mdi:state-machine"
      id: load_state
      entity_category: diagnostic
    
    relay_state:
      name: "Relay State"
      icon: "mdi:state-machine"
      id: relay_state
      entity_category: diagnostic

#########################################################################
#
# Binary Sensors - Device Status and Time Setting
#

  #  Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  #  from : https://community.home-assistant.io/t/uptime-sensor-in-hours-or-days/116392/29

  - platform: template
    name: "Device Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_seconds).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start
     
time:
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "${timezone}"
  # Change sync interval from default 5min
    update_interval: ${sntp_update_interval}
  # Set specific sntp servers to use
    servers: 
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
